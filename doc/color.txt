Color                                                              *Color.Color*
    @module "colo.color"
    @author dharmx
    @license GPL-3.0
    A class that represents a color

    Fields: ~
        {name}  (string)
        {red}   (number)


Color:new({col})                                                     *Color:new*
    Color class constructor

    Parameters: ~
        {col}  (table)  field table

    Returns: ~
        (Color)


Color:named()                                                      *Color:named*
    See if the color exists in named colors

    Returns: ~
        (string|nil)


Color:percentage()                                            *Color:percentage*
    Convert RGB range [0-255] to [0-100]

    Returns: ~
        (table)


Color:floating()                                                *Color:floating*
    Convert RGB range [0-255] to [0-1]

    Returns: ~
        (table)


Color:hex()                                                          *Color:hex*

    Returns: ~
        (string)


Color:HSL()                                                          *Color:HSL*

    Returns: ~
        (table)


Color:increase_red({amount})                                *Color:increase_red*
    Increase the red value of the RGB color

    Parameters: ~
        {amount}  (number)  increase by percentage

    Returns: ~
        (Color)


Color:increase_green({amount})                            *Color:increase_green*
    Increase the green value of the RGB color

    Parameters: ~
        {amount}  (number)  increase by percentage

    Returns: ~
        (Color)


Color:increase_blue({amount})                              *Color:increase_blue*
    Increase the blue value of the RGB color

    Parameters: ~
        {amount}  (number)  increase by percentage

    Returns: ~
        (Color)


Color:decrease_red({amount})                                *Color:decrease_red*
    Decrease the red value of the RGB color

    Parameters: ~
        {amount}  (number)  decrease by percentage

    Returns: ~
        (Color)


Color:decrease_green({amount})                            *Color:decrease_green*
    Decrease the green value of the RGB color

    Parameters: ~
        {amount}  (number)  decrease by percentage

    Returns: ~
        (Color)


Color:decrease_blue({amount})                              *Color:decrease_blue*
    Decrease the blue value of the RGB color

    Parameters: ~
        {amount}  (number)  decrease by percentage

    Returns: ~
        (Color)


Color:brighten()                                                *Color:brighten*

    Returns: ~
        (Color)


Color:lighten()                                                  *Color:lighten*

    Returns: ~
        (Color)


Color:darken()                                                    *Color:darken*

    Returns: ~
        (Color)


Color:shade({amount})                                              *Color:shade*
    Shade a color.

    Parameters: ~
        {amount}  (number)

    Returns: ~
        (Color)


Color:saturate()                                                *Color:saturate*

    Returns: ~
        (Color)


Color:desaturate()                                            *Color:desaturate*

    Returns: ~
        (Color)


Color:spin()                                                        *Color:spin*

    Returns: ~
        (Color)


Color:complement()                                            *Color:complement*
    Complement of a color

    Returns: ~
        (Color)


Color:triad()                                                      *Color:triad*
    Compute triad of the color

    Returns: ~
        (table)


Color:tetrad()                                                    *Color:tetrad*
    Compute tetrad of the color

    Returns: ~
        (table)


Color:split_complement()                                *Color:split_complement*
    Compute the split-complement of the color

    Returns: ~
        (table)


Color:brightness()                                            *Color:brightness*
    Get the brightness of the color

    Returns: ~
        (number)


Color:light()                                                      *Color:light*
    Check if a color is light

    Returns: ~
        (boolean)


Color:dark()                                                        *Color:dark*
    Check if a color is dark

    Returns: ~
        (boolean)


Color:lumin()                                                      *Color:lumin*
    Get the luminance of a color

    Returns: ~
        (number)


Color:greyscale()                                              *Color:greyscale*
    Transform a color into greyscale.


Color:readability({col})                                     *Color:readability*
    Compute color readability

    Parameters: ~
        {col}  (Color)  that needs its readability computed

    Returns: ~
        (number)


Color:readable({col})                                           *Color:readable*
    Check if a color is readable or not

    Parameters: ~
        {col}  (Color)  color that needs to be checked

    Returns: ~
        (boolean)


Color:mix()                                                          *Color:mix*

    Returns: ~
        (table)


Color:invert()                                                    *Color:invert*
    Invert a color.

    Returns: ~
        (Color)


Color:achromatic()                                            *Color:achromatic*
    @todo


Color:RGB()                                                          *Color:RGB*
    Get the RGB table from the Color instance

    Returns: ~
        (table)


Color:XYZ()                                                          *Color:XYZ*
    @todo


Color:temperature()                                          *Color:temperature*
    @todo


Color:warm()                                                        *Color:warm*
    @todo


Color:cold()                                                        *Color:cold*
    @todo


Color:more_cold()                                              *Color:more_cold*
    @todo


Color:more_warm()                                              *Color:more_warm*
    @todo


Color:contrast()                                                *Color:contrast*
    @todo


Color:increase_contrast()                              *Color:increase_contrast*
    @todo


Color:decrease_contrast()                              *Color:decrease_contrast*
    @todo


Color.HEX2RGB({hex})                                             *Color.HEX2RGB*
    Convert a hex color to RGB

    Parameters: ~
        {hex}  (string)  that should a hex color

    Returns: ~
        (table)


Color.named_colors()                                        *Color.named_colors*

    Returns: ~
        (table)


Color.random()                                                    *Color.random*
    Generate a random color

    Returns: ~
        (table)


Color.HSL2RGB()                                                  *Color.HSL2RGB*

    Returns: ~
        (table)


Color.__tostring({self}, {other})                             *Color.__tostring*
    Pass red, green and blue values into vim.inspect and return

    Parameters: ~
        {self}   (Color)
        {other}  (Color)

    Returns: ~
        (string)


Color.__eq({self}, {other})                                         *Color.__eq*
    Compare RGB values to see if they are equal

    Parameters: ~
        {self}   (Color)
        {other}  (Color)

    Returns: ~
        (boolean)


Color.__lt({self}, {other})                                         *Color.__lt*
    Add self RGB value and other RGB values and compare to see if they self is greater

    Parameters: ~
        {self}   (Color)
        {other}  (Color)

    Returns: ~
        (boolean)


Color.__gt({self}, {other})                                         *Color.__gt*
    Add self RGB value and other RGB values and compare to see if they self is lesser

    Parameters: ~
        {self}   (Color)
        {other}  (Color)

    Returns: ~
        (boolean)


Color.__add({self}, {other})                                       *Color.__add*
    Add self RGB value and other RGB values

    Parameters: ~
        {self}   (Color)
        {other}  (Color)

    Returns: ~
        (Color)


Color.__sub({self}, {other})                                       *Color.__sub*
    Add self RGB value and other RGB values

    Parameters: ~
        {self}   (Color)
        {other}  (Color)

    Returns: ~
        (Color)


vim:tw=78:ts=8:noet:ft=help:norl:

